name: Tests

on:
  workflow_call:
    inputs:
      pull-request:
        required: true
        type: boolean
      project: 
        required: false
        description: "Path to csproj file"
        type: string
      project-folder: 
        required: false
        description: "Path to project folder"
        type: string
      test-project:
        required: false
        description: "Path of test project"
        type: string
      test-project-folder:
        required: false
        description: "Path of test project folder"
        type: string
      runsettings-path:
        description: "Path to runsettings.xml"
        type: string
        default: ""
      code-exclusions:
        description: "Files to exclude from coverage"
        type: string
    secrets:
      sonar-token:
        required: true
        description: "Sonar Cloud Token configured in the repository"

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu' # Alternative distribution options are available.

      # - name: Cache SonarCloud packages
      #   uses: actions/cache@v3
      #   with:
      #     path: ~\sonar\cache
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar
          
      # - name: Cache SonarCloud scanner
      #   id: cache-sonar-scanner
      #   uses: actions/cache@v3
      #   with:
      #     path: .\.sonar\scanner
      #     key: ${{ runner.os }}-sonar-scanner
      #     restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Begin SonarCloud Scan
        if: ${{ inputs.pull-request == false }}
        env:
          SONAR_TOKEN: ${{ secrets.sonar-token }}
          COVERAGE_REPORTS_DIR: ${{ github.workspace }}/TestResults
          CODE_EXCLUSIONS: ${{ inputs.code-exclusions }}
        run: |
          dotnet-sonarscanner begin \
          /k:"gustavohrgomes_nerdstore-enterprise-application" \
          /o:"gustavohrgomes" \
          /d:sonar.login="$SONAR_TOKEN" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.coverage.exclusions="$CODE_EXCLUSIONS" \
          /d:sonar.cs.coveragePlugin=opencover \
          /d:sonar.cs.opencover.reportsPaths="$COVERAGE_REPORTS_DIR/**/*.opencover.xml"

      - name: Begin SonarCloud Scan For Pull Request
        if: ${{ inputs.pull-request == true }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.sonar-token }}
          COVERAGE_REPORTS_DIR: ${{ github.workspace }}/TestResults
        run: |
          dotnet-sonarscanner begin \
          /k:"gustavohrgomes_nerdstore-enterprise-application" \
          /o:"gustavohrgomes" \
          /d:sonar.login="$SONAR_TOKEN" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.pullrequest.key=${{ github.event.pull_request.number }} \
          /d:sonar.pullrequest.base=${{ github.event.pull_request.base.ref }} \
          /d:sonar.pullrequest.branch=${{ github.event.pull_request.head.ref }} \
          /d:sonar.cs.coveragePlugin=opencover \
          /d:sonar.cs.opencover.reportsPaths="$COVERAGE_REPORTS_DIR/**/*.opencover.xml"

      - name: Restore
        run: dotnet restore

      - name: Build Application
        run: dotnet build --no-restore

      - name: Run Tests
        if: ${{ inputs.runsettings-path != '' }}
        env:
          COVERAGE_REPORTS_DIR: ${{ github.workspace }}/TestResults
          RUN_SETTINGS: ${{ inputs.runsettings-path }}
          TEST_PROJECT: ${{ inputs.test-project-path }}
        run: |
          dotnet test $TEST_PROJECT \
          --collect:"XPlat Code Coverage" \
          --results-directory:"$COVERAGE_REPORTS_DIR/" \
          --settings $RUN_SETTINGS

      - name: End SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.sonar-token }}
        run: dotnet-sonarscanner end /d:sonar.login="$SONAR_TOKEN"